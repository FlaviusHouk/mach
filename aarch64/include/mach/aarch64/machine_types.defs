#ifndef _AARCH64_MACH_MACHINE_TYPES_H_
#define _AARCH64_MACH_MACHINE_TYPES_H_

/*
 * A natural_t is the type for the native
 * unsigned integer type, usually 32 bits. It is suitable for
 * most counters with a small chance of overflow.
 * While historically natural_t was meant to be the same
 * as a pointer, that is not the case here.
 */
type natural_t = uint32_t;

/*
 * An integer_t is the signed counterpart
 * of the natural_t type. Both types are
 * only supposed to be used to define
 * other types in a machine-independent
 * way.
 */
type integer_t = int32_t;

/*
 * long_natural_t and long_integer_t for kernel <-> userland interfaces as the
 * size depends on the architecture of both kernel and userland.
 */
#if defined(KERNEL_SERVER)
type rpc_long_natural_t = uint32_t;
type rpc_long_integer_t = int32_t;
#else /* KERNEL */
type rpc_long_natural_t = uint64_t;
type rpc_long_integer_t = int64_t;
#endif /* KERNEL_SERVER */

/*
 * A long_natural_t is a possibly larger unsigned integer type than natural_t.
 * Should be used instead of natural_t when we want the data to be less subject
 * to overflows.
 */
type long_natural_t = uint64_t
#if defined(KERNEL_SERVER)
    intran: long_natural_t convert_long_natural_from_user(rpc_long_natural_t)
    outtran: rpc_long_natural_t convert_long_natural_to_user(long_natural_t)
#elif defined(KERNEL_USER)
    ctype: rpc_long_natural_t
#endif
    ;

/*
 * Larger version of integer_t. Only used when we want to hold possibly larger
 * values than what is possible with integer_t.
 */
type long_integer_t = int64_t
#if defined(KERNEL_SERVER)
    intran: long_integer_t convert_long_integer_from_user(rpc_long_integer_t)
    outtran: rpc_long_integer_t convert_long_integer_to_user(long_integer_t)
#elif defined(KERNEL_USER)
    ctype: rpc_long_integer_t
#endif
    ;

/*
 * Physical address size
 */
type rpc_phys_addr_t = uint64_t;

#endif //_AARCH64_MACH_MACHINE_TYPES_H_
